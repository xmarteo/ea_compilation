.data                  
globals:               
.space 0           
heap_info:
	.space 12
    .text                 
main:                 
la    $gp, globals    
# allocate the heap   
li    $a0, 65536        
li    $v0, 9          
syscall               
# saving heap size    
move  $a2, $a0        
# computing heap_info 
la    $a0, heap_info  
# beginning of heap   
sw    $v0, 0($a0)     
# current position    
sw    $v0, 4($a0)     
# end of heap         
add   $a2, $a2, $v0   
sw    $a2, 8($a0)     
j     _main12              
write:                
li    $v0, 1          
syscall               
j     $ra             
.data                 
nl:                   
.asciiz "\n"       
.align 2              
.text                 
writeln:              
li    $v0, 1          
syscall               
la    $a0, nl         
li    $v0, 4          
syscall               
j     $ra             
readln:               
li    $v0, 5          
syscall               
j     $ra             
alloc:                
la    $a1, heap_info  
# adding extra word   
addi  $t1, $a0, 4     
# current position    
lw    $v0, 4($a1)     
move  $t0, $v0        
# end of the heap     
lw    $a2, 8($a1)     
add   $v0, $t1, $v0   
# must have v0<=a2    
bgt   $v0, $a2, oom   
sw    $v0, 4($a1)     
# length is written   
move  $v0, $t0        
div   $a0, $a0, 4     
sw    $a0, 0($v0)     
addi  $v0, $v0, 4     
j     $ra             
.data                 
error_str:            
.asciiz "out0fMem"  
.align 2              
.text                 
oom:                  
# means out of mem.   
la $a0, error_str     
li $v0, 4             
syscall               
li $v0, 10            
syscall               
j     $ra             

# begin increment
increment13:
addiu $v0, $a0, 1
jr    $ra
# end increment

# begin artificial
artificial100:
addiu $sp, $sp, -52
sw    $ra, 48($sp)
sw    $s7, 44($sp)
sw    $s6, 40($sp)
sw    $s5, 36($sp)
sw    $s4, 32($sp)
sw    $s3, 28($sp)
sw    $s2, 24($sp)
sw    $s1, 20($sp)
sw    $s0, 16($sp)
li    $v1, 0
sw    $v1, 4($sp)
li    $v1, 1
sw    $v1, 8($sp)
li    $s7, 2
li    $s6, 3
li    $s5, 4
li    $s4, 5
li    $s3, 6
li    $s2, 7
li    $s1, 8
li    $s0, 9
li    $v1, 10
sw    $v1, 12($sp)
lw    $a0, 4($sp)
jal   increment13
sw    $v0, 4($sp)
lw    $a0, 8($sp)
jal   increment13
sw    $v0, 8($sp)
move  $a0, $s7
jal   increment13
move  $s7, $v0
move  $a0, $s6
jal   increment13
move  $s6, $v0
move  $a0, $s5
jal   increment13
move  $s5, $v0
move  $a0, $s4
jal   increment13
move  $s4, $v0
move  $a0, $s3
jal   increment13
move  $s3, $v0
move  $a0, $s2
jal   increment13
move  $s2, $v0
move  $a0, $s1
jal   increment13
move  $s1, $v0
move  $a0, $s0
jal   increment13
move  $s0, $v0
lw    $a0, 12($sp)
jal   increment13
sw    $v0, 12($sp)
lw    $v1, 4($sp)
lw    $fp, 8($sp)
addu  $v0, $v1, $fp
addu  $v0, $v0, $s7
addu  $v0, $v0, $s6
addu  $v0, $v0, $s5
addu  $v0, $v0, $s4
addu  $v0, $v0, $s3
addu  $v0, $v0, $s2
addu  $v0, $v0, $s1
addu  $v0, $v0, $s0
lw    $fp, 12($sp)
addu  $v1, $v0, $fp
sw    $v1, 0($sp)
lw    $a0, 4($sp)
jal   increment13
sw    $v0, 4($sp)
lw    $a0, 8($sp)
jal   increment13
sw    $v0, 8($sp)
move  $a0, $s7
jal   increment13
move  $s7, $v0
move  $a0, $s6
jal   increment13
move  $s6, $v0
move  $a0, $s5
jal   increment13
move  $s5, $v0
move  $a0, $s4
jal   increment13
move  $s4, $v0
move  $a0, $s3
jal   increment13
move  $s3, $v0
move  $a0, $s2
jal   increment13
move  $s2, $v0
move  $a0, $s1
jal   increment13
move  $s1, $v0
move  $a0, $s0
jal   increment13
move  $s0, $v0
lw    $a0, 12($sp)
jal   increment13
sw    $v0, 12($sp)
lw    $v1, 4($sp)
lw    $fp, 8($sp)
addu  $v0, $v1, $fp
addu  $v0, $v0, $s7
addu  $v0, $v0, $s6
addu  $v0, $v0, $s5
addu  $v0, $v0, $s4
addu  $v0, $v0, $s3
addu  $v0, $v0, $s2
addu  $v0, $v0, $s1
addu  $v0, $v0, $s0
lw    $fp, 12($sp)
addu  $v0, $v0, $fp
lw    $v1, 0($sp)
addu  $v0, $v1, $v0
lw    $ra, 48($sp)
lw    $s7, 44($sp)
lw    $s6, 40($sp)
lw    $s5, 36($sp)
lw    $s4, 32($sp)
lw    $s3, 28($sp)
lw    $s2, 24($sp)
lw    $s1, 20($sp)
lw    $s0, 16($sp)
addiu $sp, $sp, 52
jr    $ra
# end artificial

# begin _main
_main12:
addiu $sp, $sp, -4
sw    $ra, 0($sp)
jal   artificial100
move  $a0, $v0
lw    $ra, 0($sp)
addiu $sp, $sp, 4
j     writeln
# end _main
