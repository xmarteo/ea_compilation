.data                  
globals:               
.space 16           
heap_info:
	.space 12
    .text                 
main:                 
la    $gp, globals    
# allocate the heap   
li    $a0, 65536        
li    $v0, 9          
syscall               
# saving heap size    
move  $a2, $a0        
# computing heap_info 
la    $a0, heap_info  
# beginning of heap   
sw    $v0, 0($a0)     
# current position    
sw    $v0, 4($a0)     
# end of heap         
add   $a2, $a2, $v0   
sw    $a2, 8($a0)     
j     _main63              
write:                
li    $v0, 1          
syscall               
j     $ra             
.data                 
nl:                   
.asciiz "\n"       
.align 2              
.text                 
writeln:              
li    $v0, 1          
syscall               
la    $a0, nl         
li    $v0, 4          
syscall               
j     $ra             
readln:               
li    $v0, 5          
syscall               
j     $ra             
alloc:                
la    $a1, heap_info  
# adding extra word   
addi  $t1, $a0, 4     
# current position    
lw    $v0, 4($a1)     
move  $t0, $v0        
# end of the heap     
lw    $a2, 8($a1)     
add   $v0, $t1, $v0   
# must have v0<=a2    
bgt   $v0, $a2, oom   
sw    $v0, 4($a1)     
# length is written   
move  $v0, $t0        
div   $a0, $a0, 4     
sw    $a0, 0($v0)     
addi  $v0, $v0, 4     
j     $ra             
.data                 
error_str:            
.asciiz "out0fMem"  
.align 2              
.text                 
oom:                  
# means out of mem.   
la $a0, error_str     
li $v0, 4             
syscall               
li $v0, 10            
syscall               
j     $ra             

# begin double
double26:
li    $a1, 0
li    $v0, 0
bgtz  $a0, double11
addu  $a0, $a1, $a0
subu  $v0, $v0, $a0
double28:
jr    $ra
double11:
bgtz  $zero, double28
subu  $a1, $v0, $a0
addu  $v0, $a0, $v0
addu  $v0, $v0, $a1
li    $a0, -2
mul   $a0, $a0, $a1
addu  $v0, $v0, $a0
j     double28
# end double

# begin arraydouble
arraydouble34:
addiu $sp, $sp, -20
sw    $ra, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s2, $a0
move  $s3, $a1
li    $s1, 0
arraydouble21:
slt   $v0, $s1, $s3
bgtz  $v0, arraydouble18
lw    $ra, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 20
jr    $ra
arraydouble18:
bgtz  $zero, arraydouble17
sll   $a0, $s1, 3
li    $v0, -8
mul   $v0, $v0, $s1
addu  $v0, $v0, $s1
addu  $v0, $a0, $v0
sll   $v0, $v0, 2
addu  $s0, $s2, $v0
sll   $v0, $s1, 1
subu  $v0, $v0, $s1
sll   $v0, $v0, 2
addu  $v0, $s2, $v0
lw    $a0, 0($v0)
jal   double26
sw    $v0, 0($s0)
addiu $s1, $s1, 1
j     arraydouble21
arraydouble17:
move  $s1, $s3
j     arraydouble21
# end arraydouble

# begin _main
_main63:
addiu $sp, $sp, -4
sw    $ra, 0($sp)
jal   readln
sw    $v0, 12($gp)
lw    $v0, 12($gp)
subu  $a0, $zero, $v0
li    $v0, -1
div   $v0, $a0, $v0
sll   $a0, $v0, 2
jal   alloc
sw    $v0, 0($gp)
lw    $v0, 12($gp)
sw    $v0, 8($gp)
_main41:
lw    $v0, 12($gp)
bgtz  $v0, _main34
bne   $v0, $zero, _main35
_main22:
lw    $a0, 0($gp)
lw    $a1, 8($gp)
jal   arraydouble34
lw    $v0, 8($gp)
sw    $v0, 12($gp)
_main17:
lw    $v0, 12($gp)
beq   $v0, $zero, _main74
bgtz  $v0, _main10
bgez  $v0, _main10
_main74:
lw    $ra, 0($sp)
addiu $sp, $sp, 4
jr    $ra
_main10:
lw    $v0, 12($gp)
addiu $v0, $v0, -1
sw    $v0, 12($gp)
lw    $a0, 0($gp)
lw    $v0, 12($gp)
sll   $v0, $v0, 2
addu  $v0, $a0, $v0
lw    $a0, 0($v0)
jal   writeln
j     _main17
_main35:
bltz  $v0, _main22
_main34:
lw    $v0, 12($gp)
addiu $v0, $v0, -1
sw    $v0, 12($gp)
jal   readln
sw    $v0, 4($gp)
lw    $a0, 0($gp)
lw    $v0, 12($gp)
sll   $v0, $v0, 2
addu  $a0, $a0, $v0
lw    $v0, 4($gp)
sw    $v0, 0($a0)
j     _main41
# end _main
