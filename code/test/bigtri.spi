.data                  
globals:               
.space 8           
heap_info:
	.space 12
    .text                 
main:                 
la    $gp, globals    
# allocate the heap   
li    $a0, 65536        
li    $v0, 9          
syscall               
# saving heap size    
move  $a2, $a0        
# computing heap_info 
la    $a0, heap_info  
# beginning of heap   
sw    $v0, 0($a0)     
# current position    
sw    $v0, 4($a0)     
# end of heap         
add   $a2, $a2, $v0   
sw    $a2, 8($a0)     
j     _main16              
write:                
li    $v0, 1          
syscall               
j     $ra             
.data                 
nl:                   
.asciiz "\n"       
.align 2              
.text                 
writeln:              
li    $v0, 1          
syscall               
la    $a0, nl         
li    $v0, 4          
syscall               
j     $ra             
readln:               
li    $v0, 5          
syscall               
j     $ra             
alloc:                
la    $a1, heap_info  
# adding extra word   
addi  $t1, $a0, 4     
# current position    
lw    $v0, 4($a1)     
move  $t0, $v0        
# end of the heap     
lw    $a2, 8($a1)     
add   $v0, $t1, $v0   
# must have v0<=a2    
bgt   $v0, $a2, oom   
sw    $v0, 4($a1)     
# length is written   
move  $v0, $t0        
div   $a0, $a0, 4     
sw    $a0, 0($v0)     
addi  $v0, $v0, 4     
j     $ra             
.data                 
error_str:            
.asciiz "out0fMem"  
.align 2              
.text                 
oom:                  
# means out of mem.   
la $a0, error_str     
li $v0, 4             
syscall               
li $v0, 10            
syscall               
j     $ra             

# begin triangle
triangle50:
addiu $sp, $sp, -20
sw    $ra, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s3, $a0
li    $s1, 0
sll   $v0, $s3, 2
addiu $a0, $v0, 4
jal   alloc
move  $s2, $v0
triangle32:
sle   $v0, $s1, $s3
bgtz  $v0, triangle30
li    $s0, 0
triangle8:
sle   $v0, $s0, $s3
bgtz  $v0, triangle6
lw    $ra, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 20
jr    $ra
triangle6:
sll   $v0, $s0, 2
addu  $v0, $s2, $v0
lw    $a0, 0($v0)
jal   affiche29
addiu $s0, $s0, 1
j     triangle8
triangle30:
addiu $s0, $s1, -1
triangle29:
bgtz  $s0, triangle28
li    $a0, 1
jal   grandir31
sw    $v0, 0($s2)
sll   $v0, $s1, 2
addu  $s0, $s2, $v0
li    $a0, 1
jal   grandir31
sw    $v0, 0($s0)
addiu $s1, $s1, 1
j     triangle32
triangle28:
sll   $v0, $s0, 2
addu  $v0, $s2, $v0
lw    $a0, 0($v0)
lw    $a1, -4($v0)
jal   bigadd82
addiu $s0, $s0, -1
j     triangle29
# end triangle

# begin modulo
modulo16:
div   $v0, $a0, $a1
mul   $v0, $v0, $a1
subu  $v0, $a0, $v0
jr    $ra
# end modulo

# begin grandir
grandir31:
addiu $sp, $sp, -20
sw    $ra, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s3, $a0
lw    $v0, 0($gp)
sll   $v0, $v0, 2
addiu $a0, $v0, 4
jal   alloc
move  $s1, $v0
li    $s2, 0
grandir12:
bgtz  $s3, grandir11
sw    $s2, 0($s1)
move  $v0, $s1
lw    $ra, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 20
jr    $ra
grandir11:
addiu $s2, $s2, 1
sll   $v0, $s2, 2
addu  $s0, $s1, $v0
li    $a1, 10
move  $a0, $s3
jal   modulo16
sw    $v0, 0($s0)
li    $v0, 10
div   $s3, $s3, $v0
j     grandir12
# end grandir

# begin copy
copy23:
lw    $a3, 0($a1)
copy9:
bgez  $a3, copy8
jr    $ra
copy8:
sll   $v0, $a3, 2
addu  $a2, $a0, $v0
addu  $v0, $a1, $v0
lw    $v0, 0($v0)
sw    $v0, 0($a2)
addiu $a3, $a3, -1
j     copy9
# end copy

# begin bigadd
bigadd82:
addiu $sp, $sp, -28
sw    $ra, 24($sp)
sw    $s5, 20($sp)
sw    $s4, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s4, $a0
move  $s5, $a1
lw    $s2, 0($s4)
lw    $v0, 0($s5)
slt   $a0, $s2, $v0
bgtz  $a0, bigadd61
move  $s2, $v0
bigadd61:
li    $s3, 1
li    $s1, 0
bigadd59:
sle   $v0, $s3, $s2
bgtz  $v0, bigadd57
bigadd40:
lw    $v0, 0($s4)
sle   $v0, $s3, $v0
bgtz  $v0, bigadd37
bigadd24:
lw    $v0, 0($s5)
sle   $v0, $s3, $v0
bgtz  $v0, bigadd21
beq   $s1, $zero, bigadd6
sll   $v0, $s3, 2
addu  $v0, $s4, $v0
sw    $s1, 0($v0)
sw    $s3, 0($s4)
bigadd93:
lw    $ra, 24($sp)
lw    $s5, 20($sp)
lw    $s4, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 28
jr    $ra
bigadd6:
addiu $v0, $s3, -1
sw    $v0, 0($s4)
j     bigadd93
bigadd21:
sll   $v0, $s3, 2
addu  $a0, $s5, $v0
lw    $a0, 0($a0)
addu  $s1, $a0, $s1
addu  $s0, $s4, $v0
li    $a1, 10
move  $a0, $s1
jal   modulo16
sw    $v0, 0($s0)
li    $v0, 10
div   $s1, $s1, $v0
addiu $s3, $s3, 1
j     bigadd24
bigadd37:
sll   $v0, $s3, 2
addu  $s0, $s4, $v0
lw    $v0, 0($s0)
addu  $s1, $v0, $s1
li    $a1, 10
move  $a0, $s1
jal   modulo16
sw    $v0, 0($s0)
li    $v0, 10
div   $s1, $s1, $v0
addiu $s3, $s3, 1
j     bigadd40
bigadd57:
sll   $v0, $s3, 2
addu  $s0, $s4, $v0
lw    $a0, 0($s0)
addu  $v0, $s5, $v0
lw    $v0, 0($v0)
addu  $v0, $a0, $v0
addu  $s1, $v0, $s1
li    $a1, 10
move  $a0, $s1
jal   modulo16
sw    $v0, 0($s0)
li    $v0, 10
div   $s1, $s1, $v0
addiu $s3, $s3, 1
j     bigadd59
# end bigadd

# begin affiche
affiche29:
addiu $sp, $sp, -12
sw    $ra, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s1, $a0
lw    $s0, 0($s1)
affiche16:
li    $v0, 1
sgt   $v0, $s0, $v0
bgtz  $v0, affiche13
lw    $v0, 0($s1)
beq   $v0, $zero, affiche4
lw    $a0, 4($s1)
affiche51:
lw    $ra, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 12
j     writeln
affiche4:
li    $a0, 0
j     affiche51
affiche13:
sll   $v0, $s0, 2
addu  $v0, $s1, $v0
lw    $a0, 0($v0)
jal   write
addiu $s0, $s0, -1
j     affiche16
# end affiche

# begin _main
_main16:
addiu $sp, $sp, -4
sw    $ra, 0($sp)
li    $v0, 32
sw    $v0, 0($gp)
jal   readln
sw    $v0, 4($gp)
lw    $a0, 4($gp)
lw    $ra, 0($sp)
addiu $sp, $sp, 4
j     triangle50
# end _main
