.data                  
globals:               
.space 8           
heap_info:
	.space 12
    .text                 
main:                 
la    $gp, globals    
# allocate the heap   
li    $a0, 65536        
li    $v0, 9          
syscall               
# saving heap size    
move  $a2, $a0        
# computing heap_info 
la    $a0, heap_info  
# beginning of heap   
sw    $v0, 0($a0)     
# current position    
sw    $v0, 4($a0)     
# end of heap         
add   $a2, $a2, $v0   
sw    $a2, 8($a0)     
j     _main49              
write:                
li    $v0, 1          
syscall               
j     $ra             
.data                 
nl:                   
.asciiz "\n"       
.align 2              
.text                 
writeln:              
li    $v0, 1          
syscall               
la    $a0, nl         
li    $v0, 4          
syscall               
j     $ra             
readln:               
li    $v0, 5          
syscall               
j     $ra             
alloc:                
la    $a1, heap_info  
# adding extra word   
addi  $t1, $a0, 4     
# current position    
lw    $v0, 4($a1)     
move  $t0, $v0        
# end of the heap     
lw    $a2, 8($a1)     
add   $v0, $t1, $v0   
# must have v0<=a2    
bgt   $v0, $a2, oom   
sw    $v0, 4($a1)     
# length is written   
move  $v0, $t0        
div   $a0, $a0, 4     
sw    $a0, 0($v0)     
addi  $v0, $v0, 4     
j     $ra             
.data                 
error_str:            
.asciiz "out0fMem"  
.align 2              
.text                 
oom:                  
# means out of mem.   
la $a0, error_str     
li $v0, 4             
syscall               
li $v0, 10            
syscall               
j     $ra             

# begin output
output35:
addiu $sp, $sp, -16
sw    $ra, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s1, $a0
move  $s2, $a1
li    $s0, 1
output21:
addiu $a0, $s0, -1
li    $v0, 2
div   $v0, $a0, $v0
addiu $a1, $s2, -1
li    $a0, 2
div   $a0, $a1, $a0
slt   $a0, $v0, $a0
bgtz  $a0, output10
lw    $ra, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 16
jr    $ra
output10:
sll   $v0, $v0, 2
addu  $v0, $s1, $v0
lw    $a0, 0($v0)
jal   writeln
addiu $a0, $s0, -1
li    $v0, 2
div   $v0, $a0, $v0
sll   $v0, $v0, 1
addiu $s0, $v0, 3
j     output21
# end output

# begin input
input42:
addiu $sp, $sp, -20
sw    $ra, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s3, $a0
addiu $a0, $s3, -1
li    $v0, 2
div   $v0, $a0, $v0
sll   $a0, $v0, 2
jal   alloc
move  $s1, $v0
li    $s2, 1
input22:
addiu $a0, $s2, -1
li    $v0, 2
div   $v0, $a0, $v0
addiu $a1, $s3, -1
li    $a0, 2
div   $a0, $a1, $a0
slt   $a0, $v0, $a0
bgtz  $a0, input11
move  $v0, $s1
lw    $ra, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 20
jr    $ra
input11:
sll   $v0, $v0, 2
addu  $s0, $s1, $v0
jal   readln
sw    $v0, 0($s0)
addiu $a0, $s2, -1
li    $v0, 2
div   $v0, $a0, $v0
sll   $v0, $v0, 1
addiu $s2, $v0, 3
j     input22
# end input

# begin dutch
dutch133:
li    $t2, 0
li    $a1, 0
lw    $v0, 0($gp)
addiu $a0, $v0, -1
li    $v0, 2
div   $v0, $a0, $v0
sll   $v0, $v0, 1
addiu $t0, $v0, 1
dutch113:
addiu $a0, $t2, -1
li    $v0, 2
div   $v0, $a0, $v0
addiu $a2, $t0, -1
li    $a0, 2
div   $t1, $a2, $a0
slt   $a0, $v0, $t1
bgtz  $a0, dutch105
jr    $ra
dutch105:
lw    $a0, 4($gp)
sll   $a2, $v0, 2
addu  $a2, $a0, $a2
lw    $a3, 0($a2)
beq   $a3, $zero, dutch95
li    $t3, 1
beq   $a3, $t3, dutch41
sll   $v0, $t1, 1
addiu $t0, $v0, -1
addiu $t1, $t0, -1
li    $v0, 2
div   $v0, $t1, $v0
sll   $v0, $v0, 2
addu  $v0, $a0, $v0
lw    $a0, 0($v0)
sll   $a0, $a0, 1
addiu $t1, $a0, 1
sw    $a3, 0($v0)
addiu $a0, $t1, -1
li    $v0, 2
div   $v0, $a0, $v0
sw    $v0, 0($a2)
j     dutch113
dutch41:
sll   $v0, $v0, 1
addiu $t2, $v0, 3
j     dutch113
dutch95:
addiu $t1, $a1, -1
li    $a1, 2
div   $a1, $t1, $a1
sll   $t1, $a1, 2
addu  $a0, $a0, $t1
lw    $t1, 0($a0)
sll   $t1, $t1, 1
addiu $t1, $t1, 1
sw    $a3, 0($a0)
addiu $a3, $t1, -1
li    $a0, 2
div   $a0, $a3, $a0
sw    $a0, 0($a2)
sll   $a0, $a1, 1
addiu $a1, $a0, 3
sll   $v0, $v0, 1
addiu $t2, $v0, 3
j     dutch113
# end dutch

# begin _main
_main49:
addiu $sp, $sp, -4
sw    $ra, 0($sp)
jal   readln
sll   $v0, $v0, 1
addiu $v0, $v0, 1
sw    $v0, 0($gp)
_main35:
lw    $v0, 0($gp)
addiu $a0, $v0, -1
li    $v0, 2
div   $v0, $a0, $v0
bgtz  $v0, _main26
lw    $ra, 0($sp)
addiu $sp, $sp, 4
jr    $ra
_main26:
sll   $v0, $v0, 1
addiu $a0, $v0, 1
jal   input42
sw    $v0, 4($gp)
lw    $a0, 4($gp)
lw    $v0, 0($gp)
addiu $a1, $v0, -1
li    $v0, 2
div   $v0, $a1, $v0
sll   $v0, $v0, 1
addiu $a1, $v0, 1
jal   output35
jal   dutch133
lw    $a0, 4($gp)
lw    $v0, 0($gp)
addiu $a1, $v0, -1
li    $v0, 2
div   $v0, $a1, $v0
sll   $v0, $v0, 1
addiu $a1, $v0, 1
jal   output35
jal   readln
sll   $v0, $v0, 1
addiu $v0, $v0, 1
sw    $v0, 0($gp)
j     _main35
# end _main
