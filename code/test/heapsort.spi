.data                  
globals:               
.space 8           
heap_info:
	.space 12
    .text                 
main:                 
la    $gp, globals    
# allocate the heap   
li    $a0, 65536        
li    $v0, 9          
syscall               
# saving heap size    
move  $a2, $a0        
# computing heap_info 
la    $a0, heap_info  
# beginning of heap   
sw    $v0, 0($a0)     
# current position    
sw    $v0, 4($a0)     
# end of heap         
add   $a2, $a2, $v0   
sw    $a2, 8($a0)     
j     _main29              
write:                
li    $v0, 1          
syscall               
j     $ra             
.data                 
nl:                   
.asciiz "\n"       
.align 2              
.text                 
writeln:              
li    $v0, 1          
syscall               
la    $a0, nl         
li    $v0, 4          
syscall               
j     $ra             
readln:               
li    $v0, 5          
syscall               
j     $ra             
alloc:                
la    $a1, heap_info  
# adding extra word   
addi  $t1, $a0, 4     
# current position    
lw    $v0, 4($a1)     
move  $t0, $v0        
# end of the heap     
lw    $a2, 8($a1)     
add   $v0, $t1, $v0   
# must have v0<=a2    
bgt   $v0, $a2, oom   
sw    $v0, 4($a1)     
# length is written   
move  $v0, $t0        
div   $a0, $a0, 4     
sw    $a0, 0($v0)     
addi  $v0, $v0, 4     
j     $ra             
.data                 
error_str:            
.asciiz "out0fMem"  
.align 2              
.text                 
oom:                  
# means out of mem.   
la $a0, error_str     
li $v0, 4             
syscall               
li $v0, 10            
syscall               
j     $ra             

# begin swap
swap26:
sll   $v0, $a1, 2
addu  $v0, $a0, $v0
lw    $a1, 0($v0)
sll   $a2, $a2, 2
addu  $a0, $a0, $a2
lw    $a2, 0($a0)
sw    $a2, 0($v0)
sw    $a1, 0($a0)
jr    $ra
# end swap

# begin output
output22:
addiu $sp, $sp, -16
sw    $ra, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s1, $a0
move  $s2, $a1
li    $s0, 0
output8:
slt   $v0, $s0, $s2
bgtz  $v0, output6
lw    $ra, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 16
jr    $ra
output6:
sll   $v0, $s0, 2
addu  $v0, $s1, $v0
lw    $a0, 0($v0)
jal   writeln
addiu $s0, $s0, 1
j     output8
# end output

# begin input
input26:
addiu $sp, $sp, -20
sw    $ra, 16($sp)
sw    $s3, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s3, $a0
sll   $a0, $s3, 2
jal   alloc
move  $s1, $v0
li    $s2, 0
input9:
slt   $v0, $s2, $s3
bgtz  $v0, input7
move  $v0, $s1
lw    $ra, 16($sp)
lw    $s3, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 20
jr    $ra
input7:
sll   $v0, $s2, 2
addu  $s0, $s1, $v0
jal   readln
sw    $v0, 0($s0)
addiu $s2, $s2, 1
j     input9
# end input

# begin heapsort
heapsort30:
addiu $sp, $sp, -16
sw    $ra, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s1, $a0
move  $s2, $a1
addiu $a0, $s2, -2
li    $v0, 2
div   $s0, $a0, $v0
heapsort14:
bgez  $s0, heapsort13
addiu $s0, $s2, -1
heapsort8:
bgtz  $s0, heapsort7
lw    $ra, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 16
jr    $ra
heapsort7:
li    $a1, 0
move  $a0, $s1
move  $a2, $s0
jal   swap26
li    $a1, 0
addiu $a2, $s0, -1
move  $a0, $s1
jal   downheap43
addiu $s0, $s0, -1
j     heapsort8
heapsort13:
addiu $a2, $s2, -1
move  $a0, $s1
move  $a1, $s0
jal   downheap43
addiu $s0, $s0, -1
j     heapsort14
# end heapsort

# begin downheap
downheap43:
addiu $sp, $sp, -16
sw    $ra, 12($sp)
sw    $s2, 8($sp)
sw    $s1, 4($sp)
sw    $s0, 0($sp)
move  $s1, $a0
move  $s2, $a2
downheap28:
sll   $v0, $a1, 1
addiu $s0, $v0, 1
sle   $v0, $s0, $s2
bgtz  $v0, downheap24
downheap54:
lw    $ra, 12($sp)
lw    $s2, 8($sp)
lw    $s1, 4($sp)
lw    $s0, 0($sp)
addiu $sp, $sp, 16
jr    $ra
downheap24:
addiu $a0, $s0, 1
sle   $v0, $a0, $s2
bgtz  $v0, downheap21
downheap10:
sll   $v0, $a1, 2
addu  $v0, $s1, $v0
lw    $a0, 0($v0)
sll   $v0, $s0, 2
addu  $v0, $s1, $v0
lw    $v0, 0($v0)
slt   $v0, $a0, $v0
blez  $v0, downheap54
move  $a0, $s1
move  $a2, $s0
jal   swap26
move  $a1, $s0
j     downheap28
downheap21:
sll   $v0, $s0, 2
addu  $v0, $s1, $v0
lw    $a2, 0($v0)
lw    $v0, 4($v0)
slt   $v0, $a2, $v0
blez  $v0, downheap10
move  $s0, $a0
j     downheap10
# end downheap

# begin _main
_main29:
addiu $sp, $sp, -4
sw    $ra, 0($sp)
jal   readln
sw    $v0, 0($gp)
_main17:
lw    $a0, 0($gp)
bgtz  $a0, _main53
lw    $ra, 0($sp)
addiu $sp, $sp, 4
jr    $ra
_main53:
jal   input26
sw    $v0, 4($gp)
lw    $a0, 4($gp)
lw    $a1, 0($gp)
jal   output22
lw    $a0, 4($gp)
lw    $a1, 0($gp)
jal   heapsort30
lw    $a0, 4($gp)
lw    $a1, 0($gp)
jal   output22
jal   readln
sw    $v0, 0($gp)
j     _main17
# end _main
