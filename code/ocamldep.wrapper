#!/bin/env ocaml

(* ocamldep.wrapper <filename> ... <filename> - <ocamldep command>
   runs the <ocamldep command> in an environment where all of the
   <filenames> listed appear to exist. The files are created, if
   required, before the command is run, and destroyed afterwards. *)

open Printf

(* Parse the command line. The arguments that precede "-" are understood
   as file names and stored in the list [xs]. The arguments that follow
   "-" are understood as a command and stored in [command]. *)

let xs =
  ref []

let command =
  ref ""

let verbose =
  ref false

let rec loop accumulating i =
  if i = Array.length Sys.argv then
    ()
  else if accumulating then
    match Sys.argv.(i) with
    | "-v" ->
	verbose := true;
	loop true (i+1)
    | "-" ->
	loop false (i+1)
    | _ ->
	xs := Sys.argv.(i) :: !xs;
	loop true (i+1)
  else begin
    command := sprintf "%s %s" !command (Filename.quote Sys.argv.(i));
    loop false (i+1)
  end

let () =
  loop true 1

(* Create the required files if they don't exist, run the command,
   then destroy any files that we have created. *)

let rec loop = function
  | [] ->
      if !verbose then
	fprintf stderr "ocamldep.wrapper: running %s\n" !command;
      Sys.command !command
  | x :: xs ->
      if Sys.file_exists x then
	loop xs
      else begin
	if !verbose then
	  fprintf stderr "ocamldep.wrapper: creating fake %s\n" x;
	let c = open_out x in
	close_out c;
	let exitcode = loop xs in
	if Sys.file_exists x then begin
	  try
	    if !verbose then
	      fprintf stderr "ocamldep.wrapper: removing fake %s..." x;
	    Sys.remove x;
	    if !verbose then
	      fprintf stderr " ok\n"
	  with Sys_error _ ->
	    if !verbose then
	      fprintf stderr " failed\n"
	end;
	exitcode
      end

let () =
  exit (loop !xs)

